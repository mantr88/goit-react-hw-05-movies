{"version":3,"file":"static/js/134.fccd55ca.chunk.js","mappings":"mSAGaA,EAAUC,EAAAA,GAAAA,IAAH,4NAWPC,EAAWD,EAAAA,GAAAA,IAAH,+DAKRE,EAAWF,EAAAA,GAAAA,IAAH,sFAQRG,EAAeH,EAAAA,GAAAA,IAAH,gDAIZI,GAAWJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,+M,SC5BRM,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClBC,EAAuDD,EAAvDC,OAAQC,EAA+CF,EAA/CE,MAAOC,EAAwCH,EAAxCG,YAAaC,EAA2BJ,EAA3BI,aAAcC,EAAaL,EAAbK,SAClD,OACE,UAACX,EAAD,YACE,gBACEY,IACEH,EAAW,yCAC2BA,GAClC,wDAENI,IAAKL,KAEP,UAACP,EAAD,YACE,wBAAKO,KACL,wCAAgBM,KAAKC,MAAsB,IAAfL,EAAsB,IAAlD,QACA,sCAAcC,MACd,mCACU,IACPJ,GACCA,EAAOS,OAAS,GAChBT,EAAOU,KAAI,SAAAC,GAAM,OAAIA,EAAOC,IAAX,IAAiBC,KAAK,cAKlD,EC6BD,EA9CqB,WAAO,IAAD,IACjBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOjB,EAAP,KAAckB,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAGMC,EAAO,qBADIC,EAAAA,EAAAA,MACQC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAiBxC,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,oGAEbN,GAAa,GAFA,UAGSO,EAAAA,EAAAA,IAAeZ,GAHxB,OAGPa,EAHO,OAIbV,EAASU,GAJI,sDAMP,IAAIC,MAAJ,yEANO,yBAQbT,GAAa,GARA,4EAAH,qDAWdM,GACD,GAAE,CAACX,KAGF,4BACGI,IAAa,SAACW,EAAA,EAAD,CAAcC,MAAM,aAClC,SAAC,KAAD,CAAMC,GAAIX,EAAV,yDACkB,IAAjBrB,EAAMU,SACL,UAAClB,EAAD,YACE,SAACO,EAAD,CAAWC,MAAOA,KAClB,oDACA,UAACJ,EAAD,YACE,SAACC,EAAD,CAAUmC,GAAG,OAAOT,MAAO,CAAEC,KAAMH,GAAnC,mBAGA,SAACxB,EAAD,CAAUmC,GAAG,UAAUT,MAAO,CAAEC,KAAMH,GAAtC,4BAMN,SAAC,KAAD,MAGL,C,+LCrDKY,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,mCAAG,uGACTD,EAAAA,EAAAA,GAAM,8BAAD,OAA+BD,IAD3B,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,qDAKlBC,EAAqB,mCAAG,WAAMC,GAAN,0FACZJ,EAAAA,EAAAA,GAAM,wBAAD,OAAyBD,EAAzB,kBAAsCK,IAD/B,uBAC3BF,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBT,EAAc,mCAAG,WAAMY,GAAN,0FACLL,EAAAA,EAAAA,GAAM,SAAD,OAAUK,EAAV,oBAAwBN,IADxB,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdI,EAAkB,mCAAG,WAAMD,GAAN,0FACTL,EAAAA,EAAAA,GAAM,SAAD,OAAUK,EAAV,4BAAgCN,IAD5B,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBK,EAAmB,mCAAG,WAAMF,GAAN,0FACVL,EAAAA,EAAAA,GAAM,WAAD,OACtBK,EADsB,4BACAN,IAFK,uBACzBG,EADyB,EACzBA,KADyB,kBAG1BA,GAH0B,2CAAH,qD","sources":["components/MovieInfo/MovieInfo.styled.js","components/MovieInfo/MovieInfo.jsx","Pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n  padding: 8px 0;\n  margin-bottom: 16px;\n  border-bottom: 1px solid black;\n`;\n\nexport const WrapInfo = styled.div`\n  display: flex;\n  margin-top: 20px;\n`;\n\nexport const WrapText = styled.div`\n  margin-left: 40px;\n\n  p {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const LinkInfoWrap = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const LinkInfo = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n\n  &.active {\n    color: white;\n    background-color: orangered;\n  }\n`;\n","import { WrapInfo, WrapText } from './MovieInfo.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieInfo = ({ movie }) => {\n  const { genres, title, poster_path, vote_average, overview } = movie;\n  return (\n    <WrapInfo>\n      <img\n        src={\n          poster_path\n            ? `https://image.tmdb.org/t/p/w300${poster_path}`\n            : 'https://www.movienewz.com/img/films/poster-holder.jpg'\n        }\n        alt={title}\n      />\n      <WrapText>\n        <h1>{title}</h1>\n        <p>User Score: {Math.trunc((vote_average * 100) / 10)}%</p>\n        <p>Overview: {overview}</p>\n        <p>\n          Geners:{' '}\n          {genres &&\n            genres.length > 0 &&\n            genres.map(genere => genere.name).join(', ')}\n        </p>\n      </WrapText>\n    </WrapInfo>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.shape({\n    geners: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      }).isRequired\n    ),\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string,\n  }).isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchMovieById } from 'services/api';\nimport { CircleLoader } from 'react-spinners';\nimport { MovieInfo } from 'components/MovieInfo/MovieInfo';\nimport {\n  LinkInfo,\n  LinkInfoWrap,\n  Wrapper,\n} from 'components/MovieInfo/MovieInfo.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n  const backRef = location.state?.from ?? '/';\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        setIsLoading(true);\n        const results = await fetchMovieById(movieId);\n        setMovie(results);\n      } catch (error) {\n        throw new Error(`ðŸ˜¢Sorry, it is error. Your error ðŸ‘‰ ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovie();\n  }, [movieId]);\n\n  return (\n    <main>\n      {isLoading && <CircleLoader color=\"#d66b36\" />}\n      <Link to={backRef}>ðŸ‘ˆBack to movies listðŸ‘ˆ</Link>\n      {movie.length !== 0 && (\n        <Wrapper>\n          <MovieInfo movie={movie} />\n          <h4>Additional information</h4>\n          <LinkInfoWrap>\n            <LinkInfo to=\"cast\" state={{ from: backRef }}>\n              Cast\n            </LinkInfo>\n            <LinkInfo to=\"reviews\" state={{ from: backRef }}>\n              Reviews\n            </LinkInfo>\n          </LinkInfoWrap>\n        </Wrapper>\n      )}\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY = '01917690f0f54d5c14258bd49d6faae2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularMovies = async () => {\n  const { data } = await axios(`trending/movie/day?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchMoviesByQueryStr = async query => {\n  const { data } = await axios(`search/movie?api_key=${KEY}&query=${query}`);\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios(`movie/${id}?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchCreditOfMovie = async id => {\n  const { data } = await axios(`movie/${id}/credits?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchReviewsOfMovie = async id => {\n  const { data } = await axios(`\nmovie/${id}/reviews?api_key=${KEY}`);\n  return data;\n};\n"],"names":["Wrapper","styled","WrapInfo","WrapText","LinkInfoWrap","LinkInfo","NavLink","MovieInfo","movie","genres","title","poster_path","vote_average","overview","src","alt","Math","trunc","length","map","genere","name","join","movieId","useParams","useState","setMovie","isLoading","setIsLoading","backRef","useLocation","state","from","useEffect","getMovie","fetchMovieById","results","Error","CircleLoader","color","to","KEY","axios","fetchPopularMovies","data","fetchMoviesByQueryStr","query","id","fetchCreditOfMovie","fetchReviewsOfMovie"],"sourceRoot":""}