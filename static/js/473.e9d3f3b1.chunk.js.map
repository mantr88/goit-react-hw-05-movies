{"version":3,"file":"static/js/473.e9d3f3b1.chunk.js","mappings":"0OA0CA,UArCqB,WAAO,IAAD,IACjBA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,QAAQC,IAAIH,GACZ,OAA0BI,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAGMC,EAAO,qBADIC,EAAAA,EAAAA,MACQC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAkBxC,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,oGAEbN,GAAa,GAFA,UAGSO,EAAAA,EAAAA,IAAef,GAHxB,OAGPgB,EAHO,OAIbd,QAAQC,IAAIa,GACZV,EAASU,GALI,sDAOP,IAAIC,MAAJ,yEAPO,yBASbT,GAAa,GATA,4EAAH,qDAYdM,GACD,GAAE,CAACd,KAGF,4BACGO,IAAa,SAAC,IAAD,CAAcW,MAAM,aAClC,SAAC,KAAD,CAAMC,GAAIV,EAAV,0DACA,wBAAKJ,EAAMe,SACX,SAAC,KAAD,CAAMD,GAAG,OAAT,mBACA,SAAC,KAAD,CAAMA,GAAG,UAAT,sBACA,SAAC,KAAD,MAGL,C,+ICtCKE,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,mCAAG,uGACTD,EAAAA,EAAAA,GAAM,8BAAD,OAA+BD,IAD3B,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,qDAKlBC,EAAqB,mCAAG,WAAMC,GAAN,0FACZJ,EAAAA,EAAAA,GAAM,wBAAD,OAAyBD,EAAzB,kBAAsCK,IAD/B,uBAC3BF,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBT,EAAc,mCAAG,WAAMY,GAAN,0FACLL,EAAAA,EAAAA,GAAM,SAAD,OAAUK,EAAV,oBAAwBN,IADxB,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qD","sources":["Pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchMovieById } from 'services/api';\nimport { CircleLoader } from 'react-spinners';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  console.log(movieId);\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n  const backRef = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        setIsLoading(true);\n        const results = await fetchMovieById(movieId);\n        console.log(results);\n        setMovie(results);\n      } catch (error) {\n        throw new Error(`ðŸ˜¢Sorry, it is error. Your error ðŸ‘‰ ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovie();\n  }, [movieId]);\n\n  return (\n    <main>\n      {isLoading && <CircleLoader color=\"#d66b36\" />}\n      <Link to={backRef}>ðŸ‘ˆBack to movies listðŸ‘ˆ</Link>\n      <h1>{movie.title}</h1>\n      <Link to=\"cast\">Cast</Link>\n      <Link to=\"reviews\">Reviews</Link>\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY = '01917690f0f54d5c14258bd49d6faae2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularMovies = async () => {\n  const { data } = await axios(`trending/movie/day?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchMoviesByQueryStr = async query => {\n  const { data } = await axios(`search/movie?api_key=${KEY}&query=${query}`);\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios(`movie/${id}?api_key=${KEY}`);\n  return data;\n};\n"],"names":["movieId","useParams","console","log","useState","movie","setMovie","isLoading","setIsLoading","backRef","useLocation","state","from","useEffect","getMovie","fetchMovieById","results","Error","color","to","title","KEY","axios","fetchPopularMovies","data","fetchMoviesByQueryStr","query","id"],"sourceRoot":""}