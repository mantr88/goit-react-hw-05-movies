{"version":3,"file":"static/js/597.3cea24d7.chunk.js","mappings":"kOA0CA,UArCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,sGAEbF,GAAa,GAFA,UAGUG,EAAAA,EAAAA,IAAmBT,GAH7B,gBAGLG,EAHK,EAGLA,KACRO,QAAQC,IAAIR,GACZC,EAAQD,GALK,wDAOP,IAAIS,MAAJ,yEAPO,yBASbN,GAAa,GATA,6EAAH,qDAYdE,GACD,GAAE,CAACR,KAGF,4BACE,kCACA,yBAAMK,IAAa,SAAC,IAAD,CAAcQ,MAAM,eACvC,wBACGV,EAAKW,KAAI,SAAAC,GAAI,OACZ,2BACE,gBAAKC,IAAKD,EAAKE,aAAcC,IAAKH,EAAKI,KAAMC,MAAM,SACnD,wBAAKL,EAAKI,SAFHJ,EAAKM,QADF,QASrB,C,+LCtCKC,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,mCAAG,uGACTD,EAAAA,EAAAA,GAAM,8BAAD,OAA+BD,IAD3B,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,qDAKlBC,EAAqB,mCAAG,WAAMC,GAAN,0FACZJ,EAAAA,EAAAA,GAAM,wBAAD,OAAyBD,EAAzB,kBAAsCK,IAD/B,uBAC3BF,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBG,EAAc,mCAAG,WAAMC,GAAN,0FACLN,EAAAA,EAAAA,GAAM,SAAD,OAAUM,EAAV,oBAAwBP,IADxB,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdhB,EAAkB,mCAAG,WAAMoB,GAAN,0FACTN,EAAAA,EAAAA,GAAM,SAAD,OAAUM,EAAV,4BAAgCP,IAD5B,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBK,EAAmB,mCAAG,WAAMD,GAAN,0FACVN,EAAAA,EAAAA,GAAM,WAAD,OACtBM,EADsB,4BACAP,IAFK,uBACzBG,EADyB,EACzBA,KADyB,kBAG1BA,GAH0B,2CAAH,qD","sources":["components/Cast.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCreditOfMovie } from 'services/api';\nimport { CircleLoader } from 'react-spinners';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        setIsLoading(true);\n        const { cast } = await fetchCreditOfMovie(movieId);\n        console.log(cast);\n        setCast(cast);\n      } catch (error) {\n        throw new Error(`ðŸ˜¢Sorry, it is error. Your error ðŸ‘‰ ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovie();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h3>Cast</h3>\n      <div>{isLoading && <CircleLoader color=\"#d66b36\" />}</div>\n      <ul>\n        {cast.map(item => (\n          <li key={item.cast_id}>\n            <img src={item.profile_path} alt={item.name} width=\"240\" />\n            <h4>{item.name}</h4>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = '01917690f0f54d5c14258bd49d6faae2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularMovies = async () => {\n  const { data } = await axios(`trending/movie/day?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchMoviesByQueryStr = async query => {\n  const { data } = await axios(`search/movie?api_key=${KEY}&query=${query}`);\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios(`movie/${id}?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchCreditOfMovie = async id => {\n  const { data } = await axios(`movie/${id}/credits?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchReviewsOfMovie = async id => {\n  const { data } = await axios(`\nmovie/${id}/reviews?api_key=${KEY}`);\n  return data;\n};\n"],"names":["movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","getMovie","fetchCreditOfMovie","console","log","Error","color","map","item","src","profile_path","alt","name","width","cast_id","KEY","axios","fetchPopularMovies","data","fetchMoviesByQueryStr","query","fetchMovieById","id","fetchReviewsOfMovie"],"sourceRoot":""}