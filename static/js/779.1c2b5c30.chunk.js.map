{"version":3,"file":"static/js/779.1c2b5c30.chunk.js","mappings":"0QAEaA,E,OAAcC,GAAAA,IAAH,4I,SC0CxB,EAtCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,sGAEbF,GAAa,GAFA,UAGaG,EAAAA,EAAAA,IAAoBT,GAHjC,gBAGLU,EAHK,EAGLA,QAERN,EAAWM,GALE,sDAOP,IAAIC,MAAJ,yEAPO,yBASbL,GAAa,GATA,4EAAH,qDAYdE,GACD,GAAE,CAACR,KAGF,UAACF,EAAD,YACE,yBAAMO,IAAa,SAACO,EAAA,EAAD,CAAcC,MAAM,cACnB,IAAnBV,EAAQW,OACPX,EAAQY,KAAI,SAAAC,GAAI,OACd,2BACE,wBAAKA,EAAKC,UACV,uBAAID,EAAKE,YAFFF,EAAKG,GADA,KAOhB,2EAIP,C,+LCxCKC,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,mCAAG,uGACTD,EAAAA,EAAAA,GAAM,8BAAD,OAA+BD,IAD3B,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,qDAKlBC,EAAqB,mCAAG,WAAMC,GAAN,0FACZJ,EAAAA,EAAAA,GAAM,wBAAD,OAAyBD,EAAzB,kBAAsCK,IAD/B,uBAC3BF,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBG,EAAc,mCAAG,WAAMP,GAAN,0FACLE,EAAAA,EAAAA,GAAM,SAAD,OAAUF,EAAV,oBAAwBC,IADxB,uBACpBG,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdI,EAAkB,mCAAG,WAAMR,GAAN,0FACTE,EAAAA,EAAAA,GAAM,SAAD,OAAUF,EAAV,4BAAgCC,IAD5B,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,sDAKlBd,EAAmB,mCAAG,WAAMU,GAAN,0FACVE,EAAAA,EAAAA,GAAM,WAAD,OACtBF,EADsB,4BACAC,IAFK,uBACzBG,EADyB,EACzBA,KADyB,kBAG1BA,GAH0B,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsWrap = styled.div`\n  li {\n    list-style: none;\n    border-bottom: thick double black;\n  }\n\n  p {\n    margin-bottom: 15px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviewsOfMovie } from 'services/api';\nimport { CircleLoader } from 'react-spinners';\nimport { ReviewsWrap } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await fetchReviewsOfMovie(movieId);\n        // console.log(results);\n        setReviews(results);\n      } catch (error) {\n        throw new Error(`ðŸ˜¢Sorry, it is error. Your error ðŸ‘‰ ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovie();\n  }, [movieId]);\n\n  return (\n    <ReviewsWrap>\n      <div>{isLoading && <CircleLoader color=\"#d66b36\" />}</div>\n      {reviews.length !== 0 ? (\n        reviews.map(item => (\n          <li key={item.id}>\n            <h4>{item.author}</h4>\n            <p>{item.content}</p>\n          </li>\n        ))\n      ) : (\n        <div>Sorry, there are no reviews yetðŸ˜¿</div>\n      )}\n    </ReviewsWrap>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst KEY = '01917690f0f54d5c14258bd49d6faae2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularMovies = async () => {\n  const { data } = await axios(`trending/movie/day?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchMoviesByQueryStr = async query => {\n  const { data } = await axios(`search/movie?api_key=${KEY}&query=${query}`);\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios(`movie/${id}?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchCreditOfMovie = async id => {\n  const { data } = await axios(`movie/${id}/credits?api_key=${KEY}`);\n  return data;\n};\n\nexport const fetchReviewsOfMovie = async id => {\n  const { data } = await axios(`\nmovie/${id}/reviews?api_key=${KEY}`);\n  return data;\n};\n"],"names":["ReviewsWrap","styled","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","getMovie","fetchReviewsOfMovie","results","Error","CircleLoader","color","length","map","item","author","content","id","KEY","axios","fetchPopularMovies","data","fetchMoviesByQueryStr","query","fetchMovieById","fetchCreditOfMovie"],"sourceRoot":""}